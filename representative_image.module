<?php

/**
 * @file
 * Primary module hooks for Representative Image module.
 *
 * @TODO the following code is pending to port.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;

/**
 * Implements hook_token_info().
 */
function representative_image_token_info() {
  $tokens = [];

  $entity_definitions = \Drupal::entityTypeManager()->getDefinitions();
  foreach ($entity_definitions as $entity_type_id => $entity_type_definition) {
    $info['representative_image'] = [
      'name' => new TranslatableMarkup('Representative image'),
      'description' => new FormattableMarkup('Replaced by an image selected by the configuration of a Representative Image field.', []),
    ];
    $tokens[$entity_type_id] = $info;
  }

  return [
    'tokens' => $tokens,
  ];
}

/**
 * Implements hook_tokens().
 */
function representative_image_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];

  $entity_definitions = \Drupal::entityTypeManager()->getDefinitions();
  $representative_image_picker = \Drupal::service('representative_image.picker');
  foreach ($entity_definitions as $entity_type_id => $entity_type_definition) {
    if (($type == $entity_type_id) && !empty($data[$entity_type_id])) {
      $entity = $data[$entity_type_id];

      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'representative_image':
            if (!$representative_image_picker->hasRepresentativeImageField($entity)) {
              break;
            }

            $representative_image_field = $representative_image_picker->getRepresentativeImageField($entity);

            // Extract the image URL from the field formatter.
            $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity_type_id);
            $field_output = $view_builder->viewField($representative_image_field, 'default');
            if (empty($field_output[0]['#item'])) {
              break;
            }
            $replacements[$original] = $field_output[0]['#item']->entity->url('canonical');
            break;
        }
      }
    }
  }

  return $replacements;
}
